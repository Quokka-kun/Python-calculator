import re

def evaluate(expression):
    # Supprimer les espaces autour de l'expression
    expression = expression.replace(' ', '')

    def apply_operator(left, operator, right):
        if operator == '+':
            return left + right
        elif operator == '-':
            return left - right
        elif operator == '*':
            return left * right
        elif operator == '/':
            if right == 0:
                raise ValueError("Division by zero")
            return left / right
        else:
            raise ValueError(f"Unsupported operator {operator}")

    def calculate_basic(exp):
        # Première étape : traiter les multiplications et les divisions
        while re.search(r'[*/]', exp):
            match = re.search(r'(\d+\.?\d*)([*/])(\d+\.?\d*)', exp)
            if match:
                left, op, right = match.groups()
                left, right = float(left), float(right)
                result = apply_operator(left, op, right)
                exp = exp[:match.start()] + str(result) + exp[match.end():]
        
        # Deuxième étape : traiter les additions et les soustractions
        terms = re.split(r'([+-])', exp)
        total = float(terms[0])
        i = 1
        while i < len(terms):
            operator = terms[i]
            number = float(terms[i + 1])
            total = apply_operator(total, operator, number)
            i += 2
        return total

    def evaluate_parentheses(exp):
        while '(' in exp:
            # Trouver la dernière parenthèse fermante
            right_paren = exp.rindex(')')
            # Trouver la parenthèse ouvrante correspondante
            left_paren = exp.rfind('(', 0, right_paren)
            # Calculer le résultat de l'expression entre parenthèses
            inner_exp = exp[left_paren + 1:right_paren]
            result = calculate_basic(inner_exp)
            # Remplacer l'expression entre parenthèses par le résultat
            exp = exp[:left_paren] + str(result) + exp[right_paren + 1:]
        return calculate_basic(exp)

    try:
        return evaluate_parentheses(expression)
    except Exception as e:
        return f"Error: {e}"

# Exemple d'utilisation
expression = "2 + 4 * 2"
result = evaluate(expression)
print(result)  # Devrait afficher 10
